{"version":3,"file":"dag-map.umd.js","sources":["dag-map.ts"],"sourcesContent":["export interface Callback<T> {\n  (key: string, value: T | null): void;\n}\n\n/**\n * A map of key/value pairs with dependencies contraints that can be traversed\n * in topological order and is checked for cycles.\n *\n * @class DAG\n * @constructor\n */\nexport default class DAG<T> {\n  private _vertices = new Vertices<T>();\n\n  /**\n   * Adds a key/value pair with dependencies on other key/value pairs.\n   *\n   * @public\n   * @method addEdges\n   * @param {string[]}   key The key of the vertex to be added.\n   * @param {any}      value The value of that vertex.\n   * @param {string[]|string|undefined}  before A key or array of keys of the vertices that must\n   *                                            be visited before this vertex.\n   * @param {string[]|string|undefined}   after An string or array of strings with the keys of the\n   *                                            vertices that must be after this vertex is visited.\n   */\n  public add(key: string, value: any,\n                  before?: string | string[] | undefined,\n                  after?: string | string[] | undefined) {\n    let vertices = this._vertices;\n    let v = vertices.add(key);\n    v.val = value;\n    if (before) {\n      if (typeof before === \"string\") {\n        vertices.addEdge(v, vertices.add(before));\n      } else {\n        for (let i = 0; i < before.length; i++) {\n          vertices.addEdge(v, vertices.add(before[i]));\n        }\n      }\n    }\n    if (after) {\n      if (typeof after === \"string\") {\n        vertices.addEdge(vertices.add(after), v);\n      } else {\n        for (let i = 0; i < after.length; i++) {\n          vertices.addEdge(vertices.add(after[i]), v);\n        }\n      }\n    }\n  }\n\n  /**\n   * Visits key/value pairs in topological order.\n   *\n   * @public\n   * @method  topsort\n   * @param {Function} fn The function to be invoked with each key/value.\n   */\n  public topsort(callback: Callback<T>) {\n    this._vertices.topsort(callback);\n  }\n}\n\nclass Vertices<T> {\n  private stack: IntStack = new IntStack();\n  private result: IntStack = new IntStack();\n  private vertices: Vertex<T>[] = [];\n\n  public add(key: string): Vertex<T> {\n    if (!key) throw new Error(\"missing key\");\n    let vertices = this.vertices;\n    let i = 0;\n    let vertex: Vertex<T>;\n    for (; i < vertices.length; i++) {\n      vertex = vertices[i];\n      if (vertex.key === key) return vertex;\n    }\n    return vertices[i] = {\n      id: i,\n      key: key,\n      val: null,\n      inc: null,\n      out: false,\n      mark: false\n    };\n  }\n\n  public addEdge(v: Vertex<T>, w: Vertex<T>): void {\n    this.check(v, w.key);\n    let { inc } = w;\n    if (!inc) {\n      w.inc = [ v.id ];\n    } else {\n      let i = 0;\n      for (; i < inc.length; i++) {\n        if (inc[i] === v.id) return;\n      }\n      inc[i] = v.id;\n    }\n    v.out = true;\n  }\n\n  public topsort(cb: Callback<T>): void {\n    this.reset();\n    let vertices = this.vertices;\n    for (let i = 0; i < vertices.length; i++) {\n      let vertex = vertices[i];\n      if (vertex.out) continue;\n      this.visit(vertex, undefined);\n    }\n    this.each(cb);\n  }\n\n  private check(v: Vertex<T>, w: string): void {\n    if (v.key === w) {\n      throw new Error(\"cycle detected: \" + w + \" <- \" + w);\n    }\n    let inc = v.inc;\n    // quick check\n    if (!inc || inc.length === 0) return;\n    let vertices = this.vertices;\n    // shallow check\n    for (let i = 0; i < inc.length; i++) {\n      let key = vertices[inc[i]].key;\n      if (key === w) {\n        throw new Error(\"cycle detected: \" + w + \" <- \" + v.key + \" <- \" + w);\n      }\n    }\n    // deep check\n    this.reset();\n    this.visit(v, w);\n    if (this.result.len > 0) {\n      let msg = \"cycle detected: \" + w;\n      this.each((key) => {\n        msg += \" <- \" + key;\n      });\n      throw new Error(msg);\n    }\n  }\n\n  private each(cb: Callback<T>): void {\n    let { result, vertices } = this;\n    for (let i = 0; i < result.len; i++) {\n      let vertex = vertices[result.stack[i]];\n      cb(vertex.key, vertex.val);\n    }\n  }\n\n  // reuse between cycle check and topsort\n  private reset(): void {\n    this.stack.len = 0;\n    this.result.len = 0;\n    let vertices = this.vertices;\n    for (let i = 0; i < vertices.length; i++) {\n      vertices[i].mark = false;\n    }\n  }\n\n  private visit(start: Vertex<T>, search: string | undefined): void {\n    let { stack, result, vertices } = this;\n    stack.push(start.id);\n    while (stack.len) {\n      let index = stack.pop();\n      if (index < 0) { // pop frame\n        index = ~index;\n        if (search) {\n          result.pop();\n        } else {\n          result.push(index);\n        }\n      } else { // push frame\n        let vertex = vertices[index];\n        if (vertex.mark) {\n          continue;\n        }\n        if (search) {\n          result.push(index);\n          if (search === vertex.key) {\n            return;\n          }\n        }\n        vertex.mark = true;\n        stack.push(~index);\n        let incoming = vertex.inc;\n        if (incoming) {\n          let i = incoming.length;\n          while (i--) {\n            index = incoming[i];\n            if (!vertices[index].mark) {\n              stack.push(index);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\ninterface Vertex<T> {\n  id: number;\n  key: string;\n  val: T | null;\n  inc: number[] | null;\n  out: boolean;\n  mark: boolean;\n}\n\nclass IntStack {\n  public stack = [0, 0, 0, 0, 0, 0];\n  public len = 0;\n\n  push(n: number) {\n    this.stack[this.len++] = n;\n  }\n\n  pop() {\n    return this.stack[--this.len];\n  }\n}\n"],"names":[],"mappings":";;;;;;AAIA;;;;;;;AAOA,IAAA,GAAA,GAAA,CAAA,YAAA;IAAA,SAAA,GAAA,GAAA;QACU,IAAV,CAAA,SAAmB,GAAG,IAAI,QAAQ,EAAK,CAAC;KAkDvC;;;;;;;;;;;;;IApCQ,GAAT,CAAA,SAAA,CAAA,GAAY,GAAV,UAAW,GAAW,EAAE,KAAU,EAClB,MAAsC,EACtC,KAAqC,EAFvD;QAGI,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9B,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC;QACd,IAAI,MAAM,EAAE;YACV,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAC9B,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3C;iBAAM;gBACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACtC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC9C;aACF;SACF;QACD,IAAI,KAAK,EAAE;YACT,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1C;iBAAM;gBACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACrC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC7C;aACF;SACF;KACF,CAAH;;;;;;;;IASS,GAAT,CAAA,SAAA,CAAA,OAAgB,GAAd,UAAe,QAAqB,EAAtC;QACI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAClC,CAAH;IACA,OAAA,GAAC,CAAD;CAAC,EAAD,CAAA,CAAC;AAAD,AAEA,IAAA,QAAA,GAAA,CAAA,YAAA;IAAA,SAAA,QAAA,GAAA;QACU,IAAV,CAAA,KAAe,GAAa,IAAI,QAAQ,EAAE,CAAC;QACjC,IAAV,CAAA,MAAgB,GAAa,IAAI,QAAQ,EAAE,CAAC;QAClC,IAAV,CAAA,QAAkB,GAAgB,EAAE,CAAC;KAkIpC;IAhIQ,QAAT,CAAA,SAAA,CAAA,GAAY,GAAV,UAAW,GAAW,EAAxB;QACI,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,MAAiB,CAAC;QACtB,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,MAAM,CAAC,GAAG,KAAK,GAAG;gBAAE,OAAO,MAAM,CAAC;SACvC;QACD,OAAO,QAAQ,CAAC,CAAC,CAAC,GAAG;YACnB,EAAE,EAAE,CAAC;YACL,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,KAAK;SACZ,CAAC;KACH,CAAH;IAES,QAAT,CAAA,SAAA,CAAA,OAAgB,GAAd,UAAe,CAAY,EAAE,CAAY,EAA3C;QACI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QACf,IAAV,GAAA,GAAA,CAAA,CAAA,GAAa,CAAO;QAChB,IAAI,CAAC,GAAG,EAAE;YACR,CAAC,CAAC,GAAG,GAAG,CAAE,CAAC,CAAC,EAAE,CAAE,CAAC;SAClB;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,OAAO,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBAAE,OAAO;aAC7B;YACD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SACf;QACD,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;KACd,CAAH;IAES,QAAT,CAAA,SAAA,CAAA,OAAgB,GAAd,UAAe,EAAe,EAAhC;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,MAAM,CAAC,GAAG;gBAAE,SAAS;YACzB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACf,CAAH;IAEU,QAAV,CAAA,SAAA,CAAA,KAAe,GAAb,UAAc,CAAY,EAAE,CAAS,EAAvC;QACI,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;SACtD;QACD,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;;QAEhB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC/B,IAAI,GAAG,KAAK,CAAC,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;aACvE;SACF;;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YACvB,IAAI,KAAG,GAAG,kBAAkB,GAAG,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAG,EAApB;gBACQ,KAAG,IAAI,MAAM,GAAG,GAAG,CAAC;aACrB,CAAC,CAAC;YACH,MAAM,IAAI,KAAK,CAAC,KAAG,CAAC,CAAC;SACtB;KACF,CAAH;IAEU,QAAV,CAAA,SAAA,CAAA,IAAc,GAAZ,UAAa,EAAe,EAA9B;QACI,IAAA,EAAJ,GAAA,IAAmC,EAAzB,MAAV,GAAA,EAAA,CAAA,MAAgB,EAAE,QAAlB,GAAA,EAAA,CAAA,QAA0B,CAAU;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;SAC5B;KACF,CAAH;;IAGU,QAAV,CAAA,SAAA,CAAA,KAAe,GAAb,YAAF;QACI,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;QACpB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;SAC1B;KACF,CAAH;IAEU,QAAV,CAAA,SAAA,CAAA,KAAe,GAAb,UAAc,KAAgB,EAAE,MAA0B,EAA5D;QACI,IAAA,EAAJ,GAAA,IAA0C,EAAhC,KAAV,GAAA,EAAA,CAAA,KAAe,EAAE,MAAjB,GAAA,EAAA,CAAA,MAAuB,EAAE,QAAzB,GAAA,EAAA,CAAA,QAAiC,CAAU;QACvC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACrB,OAAO,KAAK,CAAC,GAAG,EAAE;YAChB,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YACxB,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,KAAK,GAAG,CAAC,KAAK,CAAC;gBACf,IAAI,MAAM,EAAE;oBACV,MAAM,CAAC,GAAG,EAAE,CAAC;iBACd;qBAAM;oBACL,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACpB;aACF;iBAAM;gBACL,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,MAAM,CAAC,IAAI,EAAE;oBACf,SAAS;iBACV;gBACD,IAAI,MAAM,EAAE;oBACV,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnB,IAAI,MAAM,KAAK,MAAM,CAAC,GAAG,EAAE;wBACzB,OAAO;qBACR;iBACF;gBACD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;gBACnB,IAAI,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC;gBAC1B,IAAI,QAAQ,EAAE;oBACZ,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;oBACxB,OAAO,CAAC,EAAE,EAAE;wBACV,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE;4BACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACnB;qBACF;iBACF;aACF;SACF;KACF,CAAH;IACA,OAAA,QAAC,CAAD;CAAC,EAAD,CAAA,CAAC;AAWD,IAAA,QAAA,GAAA,CAAA,YAAA;IAAA,SAAA,QAAA,GAAA;QACS,IAAT,CAAA,KAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,IAAT,CAAA,GAAY,GAAG,CAAC,CAAC;KAShB;IAPC,QAAF,CAAA,SAAA,CAAA,IAAM,GAAJ,UAAK,CAAS,EAAhB;QACI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;KAC5B,CAAH;IAEE,QAAF,CAAA,SAAA,CAAA,GAAK,GAAH,YAAF;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/B,CAAH;IACA,OAAA,QAAC,CAAD;CAAC,EAAD,CAAA,CAAC;;;;;;"}